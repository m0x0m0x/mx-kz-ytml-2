======== PART 23 OF 46  ========


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/rez/Inspect_2025-06-11_18-03-43_900488.md ------

# Inspect

**Timestamp:** 2025-06-11_18-03-43_900488

```
'\x1b[34m╭─\x1b[0m\x1b[34m──────────────────────────────────────────────────\x1b[0m\x1b[34m \x1b[0m\x1b[1;34m<\x1b[0m\x1b[1;95mclass\x1b[0m\x1b[39m \x1b[0m\x1b[32m\'str\'\x1b[0m\x1b[1;34m>\x1b[0m\x1b[34m \x1b[0m\x1b[34m───────────────────────────────────────────────────\x1b[0m\x1b[34m─╮\x1b[0m\n\x1b[34m│\x1b[0m \x1b[1;35mstr\x1b[0m\x1b[1;36m(\x1b[0m\x1b[33mobject\x1b[0m\x1b[36m=\x1b[0m\x1b[32m\'\'\x1b[0m\x1b[1;36m)\x1b[0m\x1b[36m -> str\x1b[0m                                                                                                \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m \x1b[1;35mstr\x1b[0m\x1b[1;36m(\x1b[0m\x1b[36mbytes_or_buffer\x1b[0m\x1b[1;36m[\x1b[0m\x1b[36m, encoding\x1b[0m\x1b[1;36m[\x1b[0m\x1b[36m, errors\x1b[0m\x1b[1;36m]\x1b[0m\x1b[1;36m]\x1b[0m\x1b[1;36m)\x1b[0m\x1b[36m -> str\x1b[0m                                                                    \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                                                                                                                      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m \x1b[32m╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m \x1b[32m│\x1b[0m \x1b[32m\'Wokeism is a term that has been used to describe a cultural \'\x1b[0m+\x1b[1;36m1060\x1b[0m                                              \x1b[32m│\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m \x1b[32m╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                                                                                                                      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__doc__\x1b[0m = \x1b[32m"str\x1b[0m\x1b[32m(\x1b[0m\x1b[32mobject\x1b[0m\x1b[32m=\'\'\x1b[0m\x1b[32m)\x1b[0m\x1b[32m -> str\\nstr\x1b[0m\x1b[32m(\x1b[0m\x1b[32mbytes_or_buffer\x1b[0m\x1b[32m[\x1b[0m\x1b[32m, encoding\x1b[0m\x1b[32m[\x1b[0m\x1b[32m, errors\x1b[0m\x1b[32m]\x1b[0m\x1b[32m]\x1b[0m\x1b[32m)\x1b[0m\x1b[32m -> str\\n\\nCreate a new string\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[32mobject from the given object. If encoding or\\nerrors is specified, then the object must expose a\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[32mdata buffer\\nthat will be decoded using the given encoding and error handler.\\nOtherwise, \x1b[0m       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[32mreturns the result of object.__str__\x1b[0m\x1b[32m(\x1b[0m\x1b[32m)\x1b[0m\x1b[32m \x1b[0m\x1b[32m(\x1b[0m\x1b[32mif defined\x1b[0m\x1b[32m)\x1b[0m\x1b[32m\\nor repr\x1b[0m\x1b[32m(\x1b[0m\x1b[32mobject\x1b[0m\x1b[32m)\x1b[0m\x1b[32m.\\nencoding defaults to \x1b[0m     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[32m\'utf-8\'.\\nerrors defaults to \'strict\'."\x1b[0m                                                          \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__add__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__add__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self+value.\x1b[0m                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[3;33mcapitalize\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mcapitalize\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a capitalized version of the string.\x1b[0m                                    \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[3;33mcasefold\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mcasefold\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a version of the string suitable for caseless comparisons.\x1b[0m                \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[3;33mcenter\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mcenter\x1b[0m\x1b[1m(\x1b[0mwidth, \x1b[33mfillchar\x1b[0m=\x1b[32m\' \'\x1b[0m, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a centered string of length width.\x1b[0m                    \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m         \x1b[2;3;33m__class__\x1b[0m = \x1b[3;96mclass \x1b[0m\x1b[1;31m__class__\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m                                                                             \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[1;2;35mstr\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2;33mobject\x1b[0m\x1b[2m=\x1b[0m\x1b[2;32m\'\'\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m -> str\x1b[0m                                                                            \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[1;2;35mstr\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mbytes_or_buffer\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2m, encoding\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2m, errors\x1b[0m\x1b[1;2m]\x1b[0m\x1b[1;2m]\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m -> str\x1b[0m                                                \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m      \x1b[2;3;33m__contains__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__contains__\x1b[0m\x1b[1m(\x1b[0mkey, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[1;2;35mbool\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mkey in self\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                              \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mcount\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mcount\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn the number of non-overlapping occurrences of substring sub in string \x1b[0m      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mS\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2mstart:end\x1b[0m\x1b[1;2m]\x1b[0m\x1b[2m.\x1b[0m                                                                                    \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m       \x1b[2;3;33m__delattr__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__delattr__\x1b[0m\x1b[1m(\x1b[0mname, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mImplement \x1b[0m\x1b[1;2;35mdelattr\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself, name\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                         \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__dir__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__dir__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mDefault \x1b[0m\x1b[1;2;35mdir\x1b[0m\x1b[1;2m(\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m implementation.\x1b[0m                                                     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[3;33mencode\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mencode\x1b[0m\x1b[1m(\x1b[0m\x1b[33mencoding\x1b[0m=\x1b[32m\'utf-8\'\x1b[0m, \x1b[33merrors\x1b[0m=\x1b[32m\'strict\'\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mEncode the string using the codec registered for \x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mencoding.\x1b[0m                                                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[3;33mendswith\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mendswith\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string ends with the specified suffix, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[2;3;33m__eq__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__eq__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;33mself\x1b[0m\x1b[2m==value.\x1b[0m                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[3;33mexpandtabs\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mexpandtabs\x1b[0m\x1b[1m(\x1b[0m\x1b[33mtabsize\x1b[0m=\x1b[1;36m8\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a copy where all tab characters are expanded using spaces.\x1b[0m     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m              \x1b[3;33mfind\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mfind\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn the lowest index in S where substring sub is found, such that sub is \x1b[0m       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mcontained within S\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2mstart:end\x1b[0m\x1b[1;2m]\x1b[0m\x1b[2m.\x1b[0m                                                                   \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[2;3;33m__format__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__format__\x1b[0m\x1b[1m(\x1b[0mformat_spec, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a formatted version of the string as described by \x1b[0m        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mformat_spec.\x1b[0m                                                                                     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[3;33mformat\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mformat\x1b[0m\x1b[1m(\x1b[0m*args, **kwargs\x1b[1m)\x1b[0m:                                                                     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mReturn a formatted version of the string, using substitutions from args and kwargs.\x1b[0m              \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mThe substitutions are identified by braces \x1b[0m\x1b[1;2m(\x1b[0m\x1b[2;32m\'\x1b[0m\x1b[2;32m{\x1b[0m\x1b[2;32m\'\x1b[0m\x1b[2m and \x1b[0m\x1b[2;32m\'\x1b[0m\x1b[2;32m}\x1b[0m\x1b[2;32m\'\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[3;33mformat_map\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mformat_map\x1b[0m\x1b[1m(\x1b[0mmapping, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m:                                                                      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mReturn a formatted version of the string, using substitutions from mapping.\x1b[0m                      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mThe substitutions are identified by braces \x1b[0m\x1b[1;2m(\x1b[0m\x1b[2;32m\'\x1b[0m\x1b[2;32m{\x1b[0m\x1b[2;32m\'\x1b[0m\x1b[2m and \x1b[0m\x1b[2;32m\'\x1b[0m\x1b[2;32m}\x1b[0m\x1b[2;32m\'\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[2;3;33m__ge__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__ge__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self>=value.\x1b[0m                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m  \x1b[2;3;33m__getattribute__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__getattribute__\x1b[0m\x1b[1m(\x1b[0mname, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[1;2;35mgetattr\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself, name\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m       \x1b[2;3;33m__getitem__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__getitem__\x1b[0m\x1b[1m(\x1b[0mkey, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2mkey\x1b[0m\x1b[1;2m]\x1b[0m\x1b[2m.\x1b[0m                                                       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m    \x1b[2;3;33m__getnewargs__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__getnewargs__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m:                                                                            \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m      \x1b[2;3;33m__getstate__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__getstate__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mHelper for pickle.\x1b[0m                                                           \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[2;3;33m__gt__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__gt__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self>value.\x1b[0m                                                         \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[2;3;33m__hash__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__hash__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[1;2;35mhash\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                                               \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mindex\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mindex\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn the lowest index in S where substring sub is found, such that sub is \x1b[0m      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mcontained within S\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2mstart:end\x1b[0m\x1b[1;2m]\x1b[0m\x1b[2m.\x1b[0m                                                                   \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[2;3;33m__init__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__init__\x1b[0m\x1b[1m(\x1b[0m*args, **kwargs\x1b[1m)\x1b[0m: \x1b[2mInitialize self.  See \x1b[0m\x1b[1;2;35mhelp\x1b[0m\x1b[1;2m(\x1b[0m\x1b[1;2;35mtype\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself\x1b[0m\x1b[1;2m)\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m for accurate signature.\x1b[0m    \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m \x1b[2;3;33m__init_subclass__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__init_subclass__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mThis method is called when a class is subclassed.\x1b[0m                       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33misalnum\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misalnum\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is an alpha-numeric string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m            \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33misalpha\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misalpha\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is an alphabetic string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m               \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33misascii\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misascii\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if all characters in the string are ASCII, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m           \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m         \x1b[3;33misdecimal\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misdecimal\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is a decimal string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m                 \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33misdigit\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misdigit\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is a digit string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m                     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m      \x1b[3;33misidentifier\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misidentifier\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is a valid Python identifier, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33mislower\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mislower\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is a lowercase string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m                 \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m         \x1b[3;33misnumeric\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misnumeric\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is a numeric string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m                 \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m       \x1b[3;33misprintable\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misprintable\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if all characters in the string are printable, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m   \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33misspace\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misspace\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is a whitespace string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m                \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33mistitle\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mistitle\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is a title-cased string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m               \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33misupper\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31misupper\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string is an uppercase string, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m                \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[2;3;33m__iter__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__iter__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mImplement \x1b[0m\x1b[1;2;35miter\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                                            \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m              \x1b[3;33mjoin\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mjoin\x1b[0m\x1b[1m(\x1b[0miterable, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mConcatenate any number of strings.\x1b[0m                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[2;3;33m__le__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__le__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self<=value.\x1b[0m                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__len__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__len__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[1;2;35mlen\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                                                 \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mljust\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mljust\x1b[0m\x1b[1m(\x1b[0mwidth, \x1b[33mfillchar\x1b[0m=\x1b[32m\' \'\x1b[0m, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a left-justified string of length width.\x1b[0m               \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mlower\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mlower\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a copy of the string converted to lowercase.\x1b[0m                                 \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[3;33mlstrip\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mlstrip\x1b[0m\x1b[1m(\x1b[0m\x1b[33mchars\x1b[0m=\x1b[3;35mNone\x1b[0m, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a copy of the string with leading whitespace removed.\x1b[0m          \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[2;3;33m__lt__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__lt__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self<value.\x1b[0m                                                         \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m         \x1b[3;33mmaketrans\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mmaketrans\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn a translation table usable for \x1b[0m\x1b[1;2;35mstr.translate\x1b[0m\x1b[1;2m(\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__mod__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__mod__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self%value.\x1b[0m                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__mul__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__mul__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self*value.\x1b[0m                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[2;3;33m__ne__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__ne__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn self!=value.\x1b[0m                                                        \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__new__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__new__\x1b[0m\x1b[1m(\x1b[0m*args, **kwargs\x1b[1m)\x1b[0m: \x1b[2mCreate and return a new object.  See \x1b[0m\x1b[1;2;35mhelp\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mtype\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m for accurate \x1b[0m      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2msignature.\x1b[0m                                                                                       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m         \x1b[3;33mpartition\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mpartition\x1b[0m\x1b[1m(\x1b[0msep, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mPartition the string into three parts using the given separator.\x1b[0m          \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[2;3;33m__reduce__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__reduce__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mHelper for pickle.\x1b[0m                                                             \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m     \x1b[2;3;33m__reduce_ex__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__reduce_ex__\x1b[0m\x1b[1m(\x1b[0mprotocol, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mHelper for pickle.\x1b[0m                                               \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m      \x1b[3;33mremoveprefix\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mremoveprefix\x1b[0m\x1b[1m(\x1b[0mprefix, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a str with the given prefix string removed if present.\x1b[0m       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m      \x1b[3;33mremovesuffix\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mremovesuffix\x1b[0m\x1b[1m(\x1b[0msuffix, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a str with the given suffix string removed if present.\x1b[0m       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[3;33mreplace\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mreplace\x1b[0m\x1b[1m(\x1b[0mold, new, \x1b[35m/\x1b[0m, \x1b[33mcount\x1b[0m=\x1b[1;36m-1\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a copy with all occurrences of substring old replaced\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mby new.\x1b[0m                                                                                          \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[2;3;33m__repr__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__repr__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[1;2;35mrepr\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                                               \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mrfind\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mrfind\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn the highest index in S where substring sub is found, such that sub is \x1b[0m     \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mcontained within S\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2mstart:end\x1b[0m\x1b[1;2m]\x1b[0m\x1b[2m.\x1b[0m                                                                   \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[3;33mrindex\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mrindex\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn the highest index in S where substring sub is found, such that sub is \x1b[0m    \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mcontained within S\x1b[0m\x1b[1;2m[\x1b[0m\x1b[2mstart:end\x1b[0m\x1b[1;2m]\x1b[0m\x1b[2m.\x1b[0m                                                                   \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mrjust\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mrjust\x1b[0m\x1b[1m(\x1b[0mwidth, \x1b[33mfillchar\x1b[0m=\x1b[32m\' \'\x1b[0m, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a right-justified string of length width.\x1b[0m              \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[2;3;33m__rmod__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__rmod__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn value%self.\x1b[0m                                                       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[2;3;33m__rmul__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__rmul__\x1b[0m\x1b[1m(\x1b[0mvalue, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn value*self.\x1b[0m                                                       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[3;33mrpartition\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mrpartition\x1b[0m\x1b[1m(\x1b[0msep, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mPartition the string into three parts using the given separator.\x1b[0m         \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[3;33mrsplit\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mrsplit\x1b[0m\x1b[1m(\x1b[0m\x1b[33msep\x1b[0m=\x1b[3;35mNone\x1b[0m, \x1b[33mmaxsplit\x1b[0m=\x1b[1;36m-1\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a list of the substrings in the string, using sep as \x1b[0m  \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mthe separator string.\x1b[0m                                                                            \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m            \x1b[3;33mrstrip\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mrstrip\x1b[0m\x1b[1m(\x1b[0m\x1b[33mchars\x1b[0m=\x1b[3;35mNone\x1b[0m, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a copy of the string with trailing whitespace removed.\x1b[0m         \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m       \x1b[2;3;33m__setattr__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__setattr__\x1b[0m\x1b[1m(\x1b[0mname, value, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mImplement \x1b[0m\x1b[1;2;35msetattr\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself, name, value\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                           \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[2;3;33m__sizeof__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__sizeof__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn the size of the string in memory, in bytes.\x1b[0m                             \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33msplit\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31msplit\x1b[0m\x1b[1m(\x1b[0m\x1b[33msep\x1b[0m=\x1b[3;35mNone\x1b[0m, \x1b[33mmaxsplit\x1b[0m=\x1b[1;36m-1\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a list of the substrings in the string, using sep as \x1b[0m   \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mthe separator string.\x1b[0m                                                                            \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[3;33msplitlines\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31msplitlines\x1b[0m\x1b[1m(\x1b[0m\x1b[33mkeepends\x1b[0m=\x1b[3;91mFalse\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a list of the lines in the string, breaking at line \x1b[0m      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mboundaries.\x1b[0m                                                                                      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m        \x1b[3;33mstartswith\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mstartswith\x1b[0m\x1b[1m(\x1b[0m\x1b[33m...\x1b[0m\x1b[1m)\x1b[0m \x1b[2mReturn \x1b[0m\x1b[2;3;92mTrue\x1b[0m\x1b[2m if the string starts with the specified prefix, \x1b[0m\x1b[2;3;91mFalse\x1b[0m\x1b[2m otherwise.\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m           \x1b[2;3;33m__str__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__str__\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn \x1b[0m\x1b[1;2;35mstr\x1b[0m\x1b[1;2m(\x1b[0m\x1b[2mself\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m                                                                 \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mstrip\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mstrip\x1b[0m\x1b[1m(\x1b[0m\x1b[33mchars\x1b[0m=\x1b[3;35mNone\x1b[0m, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a copy of the string with leading and trailing whitespace \x1b[0m      \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mremoved.\x1b[0m                                                                                         \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m  \x1b[2;3;33m__subclasshook__\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31m__subclasshook__\x1b[0m\x1b[1m(\x1b[0mobject, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mAbstract classes can override this to customize \x1b[0m\x1b[1;2;35missubclass\x1b[0m\x1b[1;2m(\x1b[0m\x1b[1;2m)\x1b[0m\x1b[2m.\x1b[0m   \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m          \x1b[3;33mswapcase\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mswapcase\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mConvert uppercase characters to lowercase and lowercase characters to uppercase.\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mtitle\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mtitle\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a version of the string where each word is titlecased.\x1b[0m                       \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m         \x1b[3;33mtranslate\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mtranslate\x1b[0m\x1b[1m(\x1b[0mtable, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReplace each character in the string using the given translation table.\x1b[0m \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mupper\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mupper\x1b[0m\x1b[1m(\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mReturn a copy of the string converted to uppercase.\x1b[0m                                 \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m             \x1b[3;33mzfill\x1b[0m = \x1b[3;96mdef \x1b[0m\x1b[1;31mzfill\x1b[0m\x1b[1m(\x1b[0mwidth, \x1b[35m/\x1b[0m\x1b[1m)\x1b[0m: \x1b[2mPad a numeric string with zeros on the left, to fill a field of the given \x1b[0m  \x1b[34m│\x1b[0m\n\x1b[34m│\x1b[0m                     \x1b[2mwidth.\x1b[0m                                                                                           \x1b[34m│\x1b[0m\n\x1b[34m╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\x1b[0m\n'
```


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/rez/Inspect_2025-06-11_18-03-43_900488.md ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/rez/Inspect_2025-06-11_18-07-35_309609.md ------

# Inspect

**Timestamp:** 2025-06-11_18-07-35_309609

```
'╭─────────────────────────────────────────────────── <class \'str\'> ────────────────────────────────────────────────────╮\n│ str(object=\'\') -> str                                                                                                │\n│ str(bytes_or_buffer[, encoding[, errors]]) -> str                                                                    │\n│                                                                                                                      │\n│ ╭──────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │\n│ │ "That\'s an interesting and provocative question. Wokeism, als"+2361                                              │ │\n│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │\n│                                                                                                                      │\n│           __doc__ = "str(object=\'\') -> str\\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\\n\\nCreate a new string │\n│                     object from the given object. If encoding or\\nerrors is specified, then the object must expose a │\n│                     data buffer\\nthat will be decoded using the given encoding and error handler.\\nOtherwise,        │\n│                     returns the result of object.__str__() (if defined)\\nor repr(object).\\nencoding defaults to      │\n│                     \'utf-8\'.\\nerrors defaults to \'strict\'."                                                          │\n│           __add__ = def __add__(value, /): Return self+value.                                                        │\n│        capitalize = def capitalize(): Return a capitalized version of the string.                                    │\n│          casefold = def casefold(): Return a version of the string suitable for caseless comparisons.                │\n│            center = def center(width, fillchar=\' \', /): Return a centered string of length width.                    │\n│         __class__ = class __class__(...)                                                                             │\n│                     str(object=\'\') -> str                                                                            │\n│                     str(bytes_or_buffer[, encoding[, errors]]) -> str                                                │\n│      __contains__ = def __contains__(key, /): Return bool(key in self).                                              │\n│             count = def count(...) Return the number of non-overlapping occurrences of substring sub in string       │\n│                     S[start:end].                                                                                    │\n│       __delattr__ = def __delattr__(name, /): Implement delattr(self, name).                                         │\n│           __dir__ = def __dir__(): Default dir() implementation.                                                     │\n│            encode = def encode(encoding=\'utf-8\', errors=\'strict\'): Encode the string using the codec registered for  │\n│                     encoding.                                                                                        │\n│          endswith = def endswith(...) Return True if the string ends with the specified suffix, False otherwise.     │\n│            __eq__ = def __eq__(value, /): Return self==value.                                                        │\n│        expandtabs = def expandtabs(tabsize=8): Return a copy where all tab characters are expanded using spaces.     │\n│              find = def find(...) Return the lowest index in S where substring sub is found, such that sub is        │\n│                     contained within S[start:end].                                                                   │\n│        __format__ = def __format__(format_spec, /): Return a formatted version of the string as described by         │\n│                     format_spec.                                                                                     │\n│            format = def format(*args, **kwargs):                                                                     │\n│                     Return a formatted version of the string, using substitutions from args and kwargs.              │\n│                     The substitutions are identified by braces (\'{\' and \'}\').                                        │\n│        format_map = def format_map(mapping, /):                                                                      │\n│                     Return a formatted version of the string, using substitutions from mapping.                      │\n│                     The substitutions are identified by braces (\'{\' and \'}\').                                        │\n│            __ge__ = def __ge__(value, /): Return self>=value.                                                        │\n│  __getattribute__ = def __getattribute__(name, /): Return getattr(self, name).                                       │\n│       __getitem__ = def __getitem__(key, /): Return self[key].                                                       │\n│    __getnewargs__ = def __getnewargs__():                                                                            │\n│      __getstate__ = def __getstate__(): Helper for pickle.                                                           │\n│            __gt__ = def __gt__(value, /): Return self>value.                                                         │\n│          __hash__ = def __hash__(): Return hash(self).                                                               │\n│             index = def index(...) Return the lowest index in S where substring sub is found, such that sub is       │\n│                     contained within S[start:end].                                                                   │\n│          __init__ = def __init__(*args, **kwargs): Initialize self.  See help(type(self)) for accurate signature.    │\n│ __init_subclass__ = def __init_subclass__(): This method is called when a class is subclassed.                       │\n│           isalnum = def isalnum(): Return True if the string is an alpha-numeric string, False otherwise.            │\n│           isalpha = def isalpha(): Return True if the string is an alphabetic string, False otherwise.               │\n│           isascii = def isascii(): Return True if all characters in the string are ASCII, False otherwise.           │\n│         isdecimal = def isdecimal(): Return True if the string is a decimal string, False otherwise.                 │\n│           isdigit = def isdigit(): Return True if the string is a digit string, False otherwise.                     │\n│      isidentifier = def isidentifier(): Return True if the string is a valid Python identifier, False otherwise.     │\n│           islower = def islower(): Return True if the string is a lowercase string, False otherwise.                 │\n│         isnumeric = def isnumeric(): Return True if the string is a numeric string, False otherwise.                 │\n│       isprintable = def isprintable(): Return True if all characters in the string are printable, False otherwise.   │\n│           isspace = def isspace(): Return True if the string is a whitespace string, False otherwise.                │\n│           istitle = def istitle(): Return True if the string is a title-cased string, False otherwise.               │\n│           isupper = def isupper(): Return True if the string is an uppercase string, False otherwise.                │\n│          __iter__ = def __iter__(): Implement iter(self).                                                            │\n│              join = def join(iterable, /): Concatenate any number of strings.                                        │\n│            __le__ = def __le__(value, /): Return self<=value.                                                        │\n│           __len__ = def __len__(): Return len(self).                                                                 │\n│             ljust = def ljust(width, fillchar=\' \', /): Return a left-justified string of length width.               │\n│             lower = def lower(): Return a copy of the string converted to lowercase.                                 │\n│            lstrip = def lstrip(chars=None, /): Return a copy of the string with leading whitespace removed.          │\n│            __lt__ = def __lt__(value, /): Return self<value.                                                         │\n│         maketrans = def maketrans(...) Return a translation table usable for str.translate().                        │\n│           __mod__ = def __mod__(value, /): Return self%value.                                                        │\n│           __mul__ = def __mul__(value, /): Return self*value.                                                        │\n│            __ne__ = def __ne__(value, /): Return self!=value.                                                        │\n│           __new__ = def __new__(*args, **kwargs): Create and return a new object.  See help(type) for accurate       │\n│                     signature.                                                                                       │\n│         partition = def partition(sep, /): Partition the string into three parts using the given separator.          │\n│        __reduce__ = def __reduce__(): Helper for pickle.                                                             │\n│     __reduce_ex__ = def __reduce_ex__(protocol, /): Helper for pickle.                                               │\n│      removeprefix = def removeprefix(prefix, /): Return a str with the given prefix string removed if present.       │\n│      removesuffix = def removesuffix(suffix, /): Return a str with the given suffix string removed if present.       │\n│           replace = def replace(old, new, /, count=-1): Return a copy with all occurrences of substring old replaced │\n│                     by new.                                                                                          │\n│          __repr__ = def __repr__(): Return repr(self).                                                               │\n│             rfind = def rfind(...) Return the highest index in S where substring sub is found, such that sub is      │\n│                     contained within S[start:end].                                                                   │\n│            rindex = def rindex(...) Return the highest index in S where substring sub is found, such that sub is     │\n│                     contained within S[start:end].                                                                   │\n│             rjust = def rjust(width, fillchar=\' \', /): Return a right-justified string of length width.              │\n│          __rmod__ = def __rmod__(value, /): Return value%self.                                                       │\n│          __rmul__ = def __rmul__(value, /): Return value*self.                                                       │\n│        rpartition = def rpartition(sep, /): Partition the string into three parts using the given separator.         │\n│            rsplit = def rsplit(sep=None, maxsplit=-1): Return a list of the substrings in the string, using sep as   │\n│                     the separator string.                                                                            │\n│            rstrip = def rstrip(chars=None, /): Return a copy of the string with trailing whitespace removed.         │\n│       __setattr__ = def __setattr__(name, value, /): Implement setattr(self, name, value).                           │\n│        __sizeof__ = def __sizeof__(): Return the size of the string in memory, in bytes.                             │\n│             split = def split(sep=None, maxsplit=-1): Return a list of the substrings in the string, using sep as    │\n│                     the separator string.                                                                            │\n│        splitlines = def splitlines(keepends=False): Return a list of the lines in the string, breaking at line       │\n│                     boundaries.                                                                                      │\n│        startswith = def startswith(...) Return True if the string starts with the specified prefix, False otherwise. │\n│           __str__ = def __str__(): Return str(self).                                                                 │\n│             strip = def strip(chars=None, /): Return a copy of the string with leading and trailing whitespace       │\n│                     removed.                                                                                         │\n│  __subclasshook__ = def __subclasshook__(object, /): Abstract classes can override this to customize issubclass().   │\n│          swapcase = def swapcase(): Convert uppercase characters to lowercase and lowercase characters to uppercase. │\n│             title = def title(): Return a version of the string where each word is titlecased.                       │\n│         translate = def translate(table, /): Replace each character in the string using the given translation table. │\n│             upper = def upper(): Return a copy of the string converted to uppercase.                                 │\n│             zfill = def zfill(width, /): Pad a numeric string with zeros on the left, to fill a field of the given   │\n│                     width.                                                                                           │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n'
```


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/rez/Inspect_2025-06-11_18-07-35_309609.md ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-03-43_816732.md ------

# chat_response

**Timestamp:** 2025-06-11_18-03-43_816732

```
'Wokeism is a term that has been used to describe a cultural and social movement that emphasizes social justice, equality, and awareness of issues such as racism, sexism, and other forms of oppression. It is not a type of cancer.\n\nCancer is a group of diseases characterized by the uncontrolled growth and spread of abnormal cells in the body. It is a medical condition that is caused by genetic mutations, environmental factors, and other biological processes.\n\nIn contrast, wokeism is a social and cultural phenomenon that is not a medical condition. It is a set of ideas, values, and practices that aim to promote social justice, challenge systemic inequalities, and create a more inclusive and equitable society.\n\nIt\'s worth noting that some critics of wokeism have used metaphors such as "cancer" to describe its perceived negative effects on society, but this is a figurative language and not a literal description of a medical condition. It\'s essential to approach discussions around wokeism and other social and cultural issues with nuance, respect, and an open mind, avoiding inflammatory or misleading language.'
```


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-03-43_816732.md ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-07-35_222532.md ------

# chat_response

**Timestamp:** 2025-06-11_18-07-35_222532

```
'That\'s an interesting and provocative question. Wokeism, also known as wokeness, refers to a social and cultural movement that aims to promote awareness and action on issues of social justice, particularly related to racism, sexism, and other forms of systemic inequality.\n\nWhile wokeism is not a medical condition, some critics have metaphorically described it as a kind of "cancer" that can spread and harm society. However, it\'s essential to approach this topic with nuance and consider multiple perspectives.\n\nArguments for why wokeism might be compared to a cancer:\n\n1. **Rapid spread**: Like cancer, wokeism can spread quickly, often through social media and online platforms, influencing many people and institutions.\n2. **Transformation of healthy tissue**: Critics argue that wokeism can transform healthy social structures, institutions, and relationships, replacing them with a new, rigid ideology that can be harmful to individuals and society as a whole.\n3. **Destruction of existing systems**: Wokeism can challenge and disrupt existing power structures, social norms, and institutions, which can be seen as a destructive force, much like cancer destroying healthy cells.\n\nHowever, there are also strong counterarguments:\n\n1. **Wokeism as a response to injustice**: Many people see wokeism as a necessary response to systemic injustices, a call to action to address long-standing inequalities and promote social justice.\n2. **Promoting awareness and empathy**: Wokeism can raise awareness about important social issues, encouraging people to consider the experiences and perspectives of marginalized groups, fostering empathy and understanding.\n3. **Evolution of social norms**: Wokeism can contribute to the evolution of social norms, pushing society to become more inclusive, equitable, and just.\n\nIn conclusion, while wokeism can be compared to a cancer in a metaphorical sense, it\'s crucial to recognize the complexity and multifaceted nature of this social movement. Wokeism is not a medical condition, and its impact on society is subject to debate and interpretation.\n\nIt\'s essential to engage in respectful, open discussions about the role of wokeism in shaping our social landscape, acknowledging both the potential benefits and drawbacks of this movement. By doing so, we can work towards creating a more just, equitable, and inclusive society, where diverse perspectives are valued and respected.'
```


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-07-35_222532.md ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-13-24_868112.md ------

# chat_response

**Timestamp:** 2025-06-11_18-13-24_868112

```
'The term "wokeism" refers to a social and political movement that emphasizes awareness and activism around issues of social justice, particularly those related to racism, sexism, and other forms of systemic inequality. It is not a medical condition, and it is not a type of cancer.\n\nCancer is a group of diseases characterized by the uncontrolled growth and spread of abnormal cells, which can invade and damage surrounding tissues and organs. It is a serious and potentially life-threatening medical condition that requires diagnosis and treatment by qualified healthcare professionals.\n\nThe concept of "wokeism" has been subject to various interpretations and criticisms, with some people viewing it as a positive force for social change and others expressing concerns about its potential impact on free speech, academic freedom, and social cohesion.\n\nIt\'s essential to approach discussions about "wokeism" and other social and political issues with nuance, respect, and a commitment to understanding different perspectives. However, it is not accurate or helpful to compare a social and political movement to a serious medical condition like cancer.'
```


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-13-24_868112.md ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-18-15_840827.md ------

# chat_response

**Timestamp:** 2025-06-11_18-18-15_840827

```
'The term "wokeism" refers to a cultural and social movement that emphasizes awareness of social injustices, particularly those related to racism, sexism, and other forms of oppression. While some people view wokeism as a positive force for promoting social justice and equality, others criticize it for being overly extreme, divisive, or intolerant.\n\nComparing wokeism to cancer is not an accurate or fair analogy. Cancer is a serious and potentially life-threatening medical condition characterized by the uncontrolled growth and spread of abnormal cells. Wokeism, on the other hand, is a social and cultural phenomenon that, while it may be controversial or polarizing, is not a medical condition and does not have the potential to cause physical harm.\n\nIt\'s essential to approach discussions about wokeism and other social issues with nuance, respect, and an open mind. Rather than relying on simplistic or inflammatory analogies, it\'s more productive to engage in constructive dialogue and critically evaluate the ideas, values, and implications associated with wokeism.\n\nIt\'s also worth noting that using cancer as a metaphor for social or cultural issues can be hurtful and insensitive to individuals who have experienced cancer or have loved ones affected by the disease. Cancer is a serious and personal issue that should be treated with respect and sensitivity.'
```


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/rez/chat_response_2025-06-11_18-18-15_840827.md ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/runz.sh ------

#!/usr/bin/bash
# This bash srcript is for installing the KL docker image here
clear

# Colors
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export WHITE='\033[0;37m'
export NC='\033[0m' # No Color

# Commands

hea1() {
    echo -e "${CYAN}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${CYAN}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}"
}

# Execution Zone
ru1() {
    hea1 "Execute UV "
    co1="uv run buty.py"
    echo -e "${GREEN} Executing... "
    echo -e " ${co1} ${NC}"
    eval "${co1}"
}

# Exection

ru1


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/runz.sh ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/src/gq1.py ------

# ////////////////////////////////////////////////////////////
# gq1.py - First version of panty smelling
# ////////////////////////////////////////////////////////////

# --- Imports ---

import os

from dotenv import load_dotenv
from groq import Groq
from rich import inspect as rich_inspect
from rich import print as rpr

from .outz import save_output_to_markdown
from .utz import header1

# --- Global Pussy ---

load_dotenv("src/.env")
gq_t = os.getenv("GQ")


# --- Main Function pantysmeling ---


def gq1_main():
    # env_test()
    gq1_chat1()


### Sub Funtions ###

def env_test():
    header1("Token_Brinting")
    rpr(f"[green_yellow]GQ1: {gq_t}[/green_yellow]")

### Chat Function1 ###


def gq1_chat1():
    header1("Chat1 - Testing examples from docs")

    client = Groq(
        api_key=os.environ.get("GQ"),
    )

    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": "Is wokeism a type of cancer ?",
            }
        ],
        model="llama-3.3-70b-versatile",
    )

    printrez = chat_completion.choices[0].message.content
    save_output_to_markdown(printrez, directory="rez", label="chat_response")

    rich_inspect(chat_completion, methods=True, all=True)


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/src/gq1.py ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/src/outz.py ------

import io
import re
import textwrap
from datetime import datetime
from pathlib import Path

from PIL import Image, ImageDraw, ImageFont
from rich import inspect as rich_inspect
from rich.console import Console
from rich.pretty import pretty_repr
from rich.traceback import install

# Enable rich tracebacks for debugging
install()
console = Console()


def strip_ansi_sequences(text):
    """Remove ANSI escape sequences from the text."""
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)


def save_output_to_markdown(output, directory="rez", label="output"):
    """
    Saves 'output' as a nicely formatted Markdown file in 'directory',
    using 'label' and a detailed timestamp in the filename.
    """
    try:
        dir_path = Path(directory)
        dir_path.mkdir(parents=True, exist_ok=True)

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S_%f")
        file_path = dir_path / f"{label}_{timestamp}.md"

        # Attempt pretty formatting; fallback to raw repr
        try:
            content = pretty_repr(output)
        except Exception:
            content = repr(output)

        md = (
            f"# {label}\n\n"
            f"**Timestamp:** {timestamp}\n\n"
            "```\n"
            f"{content}\n"
            "```\n"
        )

        with file_path.open("w", encoding="utf-8") as f:
            f.write(md)

        console.print(f"[bold green]✅ Saved to {file_path.resolve()}[/]")

    except Exception:
        console.print_exception(show_locals=True)


def inspect_and_save_to_image(var, label="inspected_object", directory="rez"):
    """
    Uses rich.inspect() to introspect 'var', captures the output,
    and saves it to an image file.
    """
    try:
        buf = io.StringIO()
        temp_console = Console(file=buf, force_terminal=True, width=120)

        rich_inspect(var, console=temp_console, methods=True, all=True)
        output_str = buf.getvalue()

        # Strip ANSI escape sequences
        plain_text_output = strip_ansi_sequences(output_str)

        # Create an image from the text
        font = ImageFont.load_default()
        max_width = 800  # Maximum width of the image
        line_height = 15  # Height of each line in the image
        # Approximate character width
        lines = textwrap.wrap(plain_text_output, width=max_width // 10)

        # Calculate the size of the image
        image_height = len(lines) * line_height
        image = Image.new('RGB', (max_width, image_height),
                          color=(255, 255, 255))
        draw = ImageDraw.Draw(image)

        # Draw each line of text
        for i, line in enumerate(lines):
            draw.text((10, i * line_height), line, font=font, fill=(0, 0, 0))

        # Save the image
        dir_path = Path(directory)
        dir_path.mkdir(parents=True, exist_ok=True)
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S_%f")
        file_path = dir_path / f"{label}_{timestamp}.png"
        image.save(file_path)

        console.print(f"[bold green]✅ Saved to {file_path.resolve()}[/]")

    except Exception:
        console.print_exception(show_locals=True)


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/src/outz.py ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/src/utz.py ------

# Rich Prettifier Code
# ------------------------------------------------------
import logging

from rich.console import Console  # For console.print
from rich.logging import RichHandler
from rich.panel import Panel  # For Panel()
from rich.traceback import install

console = Console()  # Standard code to access console
install(show_locals=True)

# Setting up rich logger with color
logging.basicConfig(
    level=logging.DEBUG,
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(rich_tracebacks=True, markup=True)],
)
log = logging.getLogger("rich")

# ------------------------------------------------------


def header1(text):
    panel = Panel.fit(
        f"""[green_yellow]{text}[/green_yellow]""",
        title="<:",
        subtitle=":>",
        style="Italic",
        border_style="magenta",
    )
    # Print the Panel
    console.print(panel)


def l_debug(text):
    log.debug(f"[green]{text}[/green]")


def l_info(text):
    log.info(f"[blue]{text}[/blue]")


def l_warning(text):
    log.warning(f"[yellow]{text}[/yellow]")


def l_error(text):
    log.error(f"[red]{text}[/red]")


def l_critical(text):
    log.critical(f"[white on red bold]{text}[/white on red bold]")


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/src/utz.py ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/g1/uv.lock ------

version = 1
revision = 2
requires-python = ">=3.13"

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081, upload-time = "2024-05-20T21:33:25.928Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643, upload-time = "2024-05-20T21:33:24.1Z" },
]

[[package]]
name = "anyio"
version = "4.9.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "sniffio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/95/7d/4c1bd541d4dffa1b52bd83fb8527089e097a106fc90b467a7313b105f840/anyio-4.9.0.tar.gz", hash = "sha256:673c0c244e15788651a4ff38710fea9675823028a6f08a5eda409e0c9840a028", size = 190949, upload-time = "2025-03-17T00:02:54.77Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a1/ee/48ca1a7c89ffec8b6a0c5d02b89c305671d5ffd8d3c94acf8b8c408575bb/anyio-4.9.0-py3-none-any.whl", hash = "sha256:9f76d541cad6e36af7beb62e978876f3b41e3e04f2c1fbf0884604c0a9c4d93c", size = 100916, upload-time = "2025-03-17T00:02:52.713Z" },
]

[[package]]
name = "certifi"
version = "2025.4.26"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e8/9e/c05b3920a3b7d20d3d3310465f50348e5b3694f4f88c6daf736eef3024c4/certifi-2025.4.26.tar.gz", hash = "sha256:0a816057ea3cdefcef70270d2c515e4506bbc954f417fa5ade2021213bb8f0c6", size = 160705, upload-time = "2025-04-26T02:12:29.51Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4a/7e/3db2bd1b1f9e95f7cddca6d6e75e2f2bd9f51b1246e546d88addca0106bd/certifi-2025.4.26-py3-none-any.whl", hash = "sha256:30350364dfe371162649852c63336a15c70c6510c2ad5015b21c2345311805f3", size = 159618, upload-time = "2025-04-26T02:12:27.662Z" },
]

[[package]]
name = "distro"
version = "1.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/fc/f8/98eea607f65de6527f8a2e8885fc8015d3e6f5775df186e443e0964a11c3/distro-1.9.0.tar.gz", hash = "sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed", size = 60722, upload-time = "2023-12-24T09:54:32.31Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/12/b3/231ffd4ab1fc9d679809f356cebee130ac7daa00d6d6f3206dd4fd137e9e/distro-1.9.0-py3-none-any.whl", hash = "sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2", size = 20277, upload-time = "2023-12-24T09:54:30.421Z" },
]

[[package]]
name = "dotenv"
version = "0.9.9"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "python-dotenv" },
]
wheels = [
    { url = "https://files.pythonhosted.org/packages/b2/b7/545d2c10c1fc15e48653c91efde329a790f2eecfbbf2bd16003b5db2bab0/dotenv-0.9.9-py2.py3-none-any.whl", hash = "sha256:29cf74a087b31dafdb5a446b6d7e11cbce8ed2741540e2339c69fbef92c94ce9", size = 1892, upload-time = "2025-02-19T22:15:01.647Z" },
]

[[package]]
name = "g1"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "dotenv" },
    { name = "groq" },
    { name = "pillow" },
    { name = "rich" },
]

[package.metadata]
requires-dist = [
    { name = "dotenv", specifier = ">=0.9.9" },
    { name = "groq", specifier = ">=0.26.0" },
    { name = "pillow", specifier = ">=11.2.1" },
    { name = "rich", specifier = ">=14.0.0" },
]

[[package]]
name = "groq"
version = "0.26.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "distro" },
    { name = "httpx" },
    { name = "pydantic" },
    { name = "sniffio" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b6/68/a820a22937e4a2f48b7a60e1aaf7948fb57d1c124072829b5cc06a01cfa0/groq-0.26.0.tar.gz", hash = "sha256:1f1e50d26c6134f6fb580ea7002e8f9ff5c7c1685c9e0f50d71adecd039ae5d4", size = 128500, upload-time = "2025-05-29T18:25:23.332Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/da/2e/14bef74aa760199c7a179c753953512d1aa1ed264f7477f6bd6fe9b9cff3/groq-0.26.0-py3-none-any.whl", hash = "sha256:4dc0900d506876ea39a9aa1985f12a51859bacf486fe939664248eff1f451af3", size = 129572, upload-time = "2025-05-29T18:25:22.077Z" },
]

[[package]]
name = "h11"
version = "0.16.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/01/ee/02a2c011bdab74c6fb3c75474d40b3052059d95df7e73351460c8588d963/h11-0.16.0.tar.gz", hash = "sha256:4e35b956cf45792e4caa5885e69fba00bdbc6ffafbfa020300e549b208ee5ff1", size = 101250, upload-time = "2025-04-24T03:35:25.427Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/04/4b/29cac41a4d98d144bf5f6d33995617b185d14b22401f75ca86f384e87ff1/h11-0.16.0-py3-none-any.whl", hash = "sha256:63cf8bbe7522de3bf65932fda1d9c2772064ffb3dae62d55932da54b31cb6c86", size = 37515, upload-time = "2025-04-24T03:35:24.344Z" },
]

[[package]]
name = "httpcore"
version = "1.0.9"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "h11" },
]
sdist = { url = "https://files.pythonhosted.org/packages/06/94/82699a10bca87a5556c9c59b5963f2d039dbd239f25bc2a63907a05a14cb/httpcore-1.0.9.tar.gz", hash = "sha256:6e34463af53fd2ab5d807f399a9b45ea31c3dfa2276f15a2c3f00afff6e176e8", size = 85484, upload-time = "2025-04-24T22:06:22.219Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/f5/f66802a942d491edb555dd61e3a9961140fd64c90bce1eafd741609d334d/httpcore-1.0.9-py3-none-any.whl", hash = "sha256:2d400746a40668fc9dec9810239072b40b4484b640a8c38fd654a024c7a1bf55", size = 78784, upload-time = "2025-04-24T22:06:20.566Z" },
]

[[package]]
name = "httpx"
version = "0.28.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "certifi" },
    { name = "httpcore" },
    { name = "idna" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b1/df/48c586a5fe32a0f01324ee087459e112ebb7224f646c0b5023f5e79e9956/httpx-0.28.1.tar.gz", hash = "sha256:75e98c5f16b0f35b567856f597f06ff2270a374470a5c2392242528e3e3e42fc", size = 141406, upload-time = "2024-12-06T15:37:23.222Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2a/39/e50c7c3a983047577ee07d2a9e53faf5a69493943ec3f6a384bdc792deb2/httpx-0.28.1-py3-none-any.whl", hash = "sha256:d909fcccc110f8c7faf814ca82a9a4d816bc5a6dbfea25d6591d6985b8ba59ad", size = 73517, upload-time = "2024-12-06T15:37:21.509Z" },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490, upload-time = "2024-09-15T18:07:39.745Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442, upload-time = "2024-09-15T18:07:37.964Z" },
]

[[package]]
name = "markdown-it-py"
version = "3.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mdurl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/38/71/3b932df36c1a044d397a1f92d1cf91ee0a503d91e470cbd670aa66b07ed0/markdown-it-py-3.0.0.tar.gz", hash = "sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb", size = 74596, upload-time = "2023-06-03T06:41:14.443Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/42/d7/1ec15b46af6af88f19b8e5ffea08fa375d433c998b8a7639e76935c14f1f/markdown_it_py-3.0.0-py3-none-any.whl", hash = "sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1", size = 87528, upload-time = "2023-06-03T06:41:11.019Z" },
]

[[package]]
name = "mdurl"
version = "0.1.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d6/54/cfe61301667036ec958cb99bd3efefba235e65cdeb9c84d24a8293ba1d90/mdurl-0.1.2.tar.gz", hash = "sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba", size = 8729, upload-time = "2022-08-14T12:40:10.846Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b3/38/89ba8ad64ae25be8de66a6d463314cf1eb366222074cfda9ee839c56a4b4/mdurl-0.1.2-py3-none-any.whl", hash = "sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8", size = 9979, upload-time = "2022-08-14T12:40:09.779Z" },
]

[[package]]
name = "pillow"
version = "11.2.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/af/cb/bb5c01fcd2a69335b86c22142b2bccfc3464087efb7fd382eee5ffc7fdf7/pillow-11.2.1.tar.gz", hash = "sha256:a64dd61998416367b7ef979b73d3a85853ba9bec4c2925f74e588879a58716b6", size = 47026707, upload-time = "2025-04-12T17:50:03.289Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/36/9c/447528ee3776e7ab8897fe33697a7ff3f0475bb490c5ac1456a03dc57956/pillow-11.2.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:fdec757fea0b793056419bca3e9932eb2b0ceec90ef4813ea4c1e072c389eb28", size = 3190098, upload-time = "2025-04-12T17:48:23.915Z" },
    { url = "https://files.pythonhosted.org/packages/b5/09/29d5cd052f7566a63e5b506fac9c60526e9ecc553825551333e1e18a4858/pillow-11.2.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:b0e130705d568e2f43a17bcbe74d90958e8a16263868a12c3e0d9c8162690830", size = 3030166, upload-time = "2025-04-12T17:48:25.738Z" },
    { url = "https://files.pythonhosted.org/packages/71/5d/446ee132ad35e7600652133f9c2840b4799bbd8e4adba881284860da0a36/pillow-11.2.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7bdb5e09068332578214cadd9c05e3d64d99e0e87591be22a324bdbc18925be0", size = 4408674, upload-time = "2025-04-12T17:48:27.908Z" },
    { url = "https://files.pythonhosted.org/packages/69/5f/cbe509c0ddf91cc3a03bbacf40e5c2339c4912d16458fcb797bb47bcb269/pillow-11.2.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d189ba1bebfbc0c0e529159631ec72bb9e9bc041f01ec6d3233d6d82eb823bc1", size = 4496005, upload-time = "2025-04-12T17:48:29.888Z" },
    { url = "https://files.pythonhosted.org/packages/f9/b3/dd4338d8fb8a5f312021f2977fb8198a1184893f9b00b02b75d565c33b51/pillow-11.2.1-cp313-cp313-manylinux_2_28_aarch64.whl", hash = "sha256:191955c55d8a712fab8934a42bfefbf99dd0b5875078240943f913bb66d46d9f", size = 4518707, upload-time = "2025-04-12T17:48:31.874Z" },
    { url = "https://files.pythonhosted.org/packages/13/eb/2552ecebc0b887f539111c2cd241f538b8ff5891b8903dfe672e997529be/pillow-11.2.1-cp313-cp313-manylinux_2_28_x86_64.whl", hash = "sha256:ad275964d52e2243430472fc5d2c2334b4fc3ff9c16cb0a19254e25efa03a155", size = 4610008, upload-time = "2025-04-12T17:48:34.422Z" },
    { url = "https://files.pythonhosted.org/packages/72/d1/924ce51bea494cb6e7959522d69d7b1c7e74f6821d84c63c3dc430cbbf3b/pillow-11.2.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:750f96efe0597382660d8b53e90dd1dd44568a8edb51cb7f9d5d918b80d4de14", size = 4585420, upload-time = "2025-04-12T17:48:37.641Z" },
    { url = "https://files.pythonhosted.org/packages/43/ab/8f81312d255d713b99ca37479a4cb4b0f48195e530cdc1611990eb8fd04b/pillow-11.2.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:fe15238d3798788d00716637b3d4e7bb6bde18b26e5d08335a96e88564a36b6b", size = 4667655, upload-time = "2025-04-12T17:48:39.652Z" },
    { url = "https://files.pythonhosted.org/packages/94/86/8f2e9d2dc3d308dfd137a07fe1cc478df0a23d42a6c4093b087e738e4827/pillow-11.2.1-cp313-cp313-win32.whl", hash = "sha256:3fe735ced9a607fee4f481423a9c36701a39719252a9bb251679635f99d0f7d2", size = 2332329, upload-time = "2025-04-12T17:48:41.765Z" },
    { url = "https://files.pythonhosted.org/packages/6d/ec/1179083b8d6067a613e4d595359b5fdea65d0a3b7ad623fee906e1b3c4d2/pillow-11.2.1-cp313-cp313-win_amd64.whl", hash = "sha256:74ee3d7ecb3f3c05459ba95eed5efa28d6092d751ce9bf20e3e253a4e497e691", size = 2676388, upload-time = "2025-04-12T17:48:43.625Z" },
    { url = "https://files.pythonhosted.org/packages/23/f1/2fc1e1e294de897df39fa8622d829b8828ddad938b0eaea256d65b84dd72/pillow-11.2.1-cp313-cp313-win_arm64.whl", hash = "sha256:5119225c622403afb4b44bad4c1ca6c1f98eed79db8d3bc6e4e160fc6339d66c", size = 2414950, upload-time = "2025-04-12T17:48:45.475Z" },
    { url = "https://files.pythonhosted.org/packages/c4/3e/c328c48b3f0ead7bab765a84b4977acb29f101d10e4ef57a5e3400447c03/pillow-11.2.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:8ce2e8411c7aaef53e6bb29fe98f28cd4fbd9a1d9be2eeea434331aac0536b22", size = 3192759, upload-time = "2025-04-12T17:48:47.866Z" },
    { url = "https://files.pythonhosted.org/packages/18/0e/1c68532d833fc8b9f404d3a642991441d9058eccd5606eab31617f29b6d4/pillow-11.2.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:9ee66787e095127116d91dea2143db65c7bb1e232f617aa5957c0d9d2a3f23a7", size = 3033284, upload-time = "2025-04-12T17:48:50.189Z" },
    { url = "https://files.pythonhosted.org/packages/b7/cb/6faf3fb1e7705fd2db74e070f3bf6f88693601b0ed8e81049a8266de4754/pillow-11.2.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9622e3b6c1d8b551b6e6f21873bdcc55762b4b2126633014cea1803368a9aa16", size = 4445826, upload-time = "2025-04-12T17:48:52.346Z" },
    { url = "https://files.pythonhosted.org/packages/07/94/8be03d50b70ca47fb434a358919d6a8d6580f282bbb7af7e4aa40103461d/pillow-11.2.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:63b5dff3a68f371ea06025a1a6966c9a1e1ee452fc8020c2cd0ea41b83e9037b", size = 4527329, upload-time = "2025-04-12T17:48:54.403Z" },
    { url = "https://files.pythonhosted.org/packages/fd/a4/bfe78777076dc405e3bd2080bc32da5ab3945b5a25dc5d8acaa9de64a162/pillow-11.2.1-cp313-cp313t-manylinux_2_28_aarch64.whl", hash = "sha256:31df6e2d3d8fc99f993fd253e97fae451a8db2e7207acf97859732273e108406", size = 4549049, upload-time = "2025-04-12T17:48:56.383Z" },
    { url = "https://files.pythonhosted.org/packages/65/4d/eaf9068dc687c24979e977ce5677e253624bd8b616b286f543f0c1b91662/pillow-11.2.1-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:062b7a42d672c45a70fa1f8b43d1d38ff76b63421cbbe7f88146b39e8a558d91", size = 4635408, upload-time = "2025-04-12T17:48:58.782Z" },
    { url = "https://files.pythonhosted.org/packages/1d/26/0fd443365d9c63bc79feb219f97d935cd4b93af28353cba78d8e77b61719/pillow-11.2.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:4eb92eca2711ef8be42fd3f67533765d9fd043b8c80db204f16c8ea62ee1a751", size = 4614863, upload-time = "2025-04-12T17:49:00.709Z" },
    { url = "https://files.pythonhosted.org/packages/49/65/dca4d2506be482c2c6641cacdba5c602bc76d8ceb618fd37de855653a419/pillow-11.2.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:f91ebf30830a48c825590aede79376cb40f110b387c17ee9bd59932c961044f9", size = 4692938, upload-time = "2025-04-12T17:49:02.946Z" },
    { url = "https://files.pythonhosted.org/packages/b3/92/1ca0c3f09233bd7decf8f7105a1c4e3162fb9142128c74adad0fb361b7eb/pillow-11.2.1-cp313-cp313t-win32.whl", hash = "sha256:e0b55f27f584ed623221cfe995c912c61606be8513bfa0e07d2c674b4516d9dd", size = 2335774, upload-time = "2025-04-12T17:49:04.889Z" },
    { url = "https://files.pythonhosted.org/packages/a5/ac/77525347cb43b83ae905ffe257bbe2cc6fd23acb9796639a1f56aa59d191/pillow-11.2.1-cp313-cp313t-win_amd64.whl", hash = "sha256:36d6b82164c39ce5482f649b437382c0fb2395eabc1e2b1702a6deb8ad647d6e", size = 2681895, upload-time = "2025-04-12T17:49:06.635Z" },
    { url = "https://files.pythonhosted.org/packages/67/32/32dc030cfa91ca0fc52baebbba2e009bb001122a1daa8b6a79ad830b38d3/pillow-11.2.1-cp313-cp313t-win_arm64.whl", hash = "sha256:225c832a13326e34f212d2072982bb1adb210e0cc0b153e688743018c94a2681", size = 2417234, upload-time = "2025-04-12T17:49:08.399Z" },
]

[[package]]
name = "pydantic"
version = "2.11.5"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
    { name = "typing-inspection" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f0/86/8ce9040065e8f924d642c58e4a344e33163a07f6b57f836d0d734e0ad3fb/pydantic-2.11.5.tar.gz", hash = "sha256:7f853db3d0ce78ce8bbb148c401c2cdd6431b3473c0cdff2755c7690952a7b7a", size = 787102, upload-time = "2025-05-22T21:18:08.761Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b5/69/831ed22b38ff9b4b64b66569f0e5b7b97cf3638346eb95a2147fdb49ad5f/pydantic-2.11.5-py3-none-any.whl", hash = "sha256:f9c26ba06f9747749ca1e5c94d6a85cb84254577553c8785576fd38fa64dc0f7", size = 444229, upload-time = "2025-05-22T21:18:06.329Z" },
]

[[package]]
name = "pydantic-core"
version = "2.33.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ad/88/5f2260bdfae97aabf98f1778d43f69574390ad787afb646292a638c923d4/pydantic_core-2.33.2.tar.gz", hash = "sha256:7cb8bc3605c29176e1b105350d2e6474142d7c1bd1d9327c4a9bdb46bf827acc", size = 435195, upload-time = "2025-04-23T18:33:52.104Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/46/8c/99040727b41f56616573a28771b1bfa08a3d3fe74d3d513f01251f79f172/pydantic_core-2.33.2-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:1082dd3e2d7109ad8b7da48e1d4710c8d06c253cbc4a27c1cff4fbcaa97a9e3f", size = 2015688, upload-time = "2025-04-23T18:31:53.175Z" },
    { url = "https://files.pythonhosted.org/packages/3a/cc/5999d1eb705a6cefc31f0b4a90e9f7fc400539b1a1030529700cc1b51838/pydantic_core-2.33.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f517ca031dfc037a9c07e748cefd8d96235088b83b4f4ba8939105d20fa1dcd6", size = 1844808, upload-time = "2025-04-23T18:31:54.79Z" },
    { url = "https://files.pythonhosted.org/packages/6f/5e/a0a7b8885c98889a18b6e376f344da1ef323d270b44edf8174d6bce4d622/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0a9f2c9dd19656823cb8250b0724ee9c60a82f3cdf68a080979d13092a3b0fef", size = 1885580, upload-time = "2025-04-23T18:31:57.393Z" },
    { url = "https://files.pythonhosted.org/packages/3b/2a/953581f343c7d11a304581156618c3f592435523dd9d79865903272c256a/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:2b0a451c263b01acebe51895bfb0e1cc842a5c666efe06cdf13846c7418caa9a", size = 1973859, upload-time = "2025-04-23T18:31:59.065Z" },
    { url = "https://files.pythonhosted.org/packages/e6/55/f1a813904771c03a3f97f676c62cca0c0a4138654107c1b61f19c644868b/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1ea40a64d23faa25e62a70ad163571c0b342b8bf66d5fa612ac0dec4f069d916", size = 2120810, upload-time = "2025-04-23T18:32:00.78Z" },
    { url = "https://files.pythonhosted.org/packages/aa/c3/053389835a996e18853ba107a63caae0b9deb4a276c6b472931ea9ae6e48/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0fb2d542b4d66f9470e8065c5469ec676978d625a8b7a363f07d9a501a9cb36a", size = 2676498, upload-time = "2025-04-23T18:32:02.418Z" },
    { url = "https://files.pythonhosted.org/packages/eb/3c/f4abd740877a35abade05e437245b192f9d0ffb48bbbbd708df33d3cda37/pydantic_core-2.33.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9fdac5d6ffa1b5a83bca06ffe7583f5576555e6c8b3a91fbd25ea7780f825f7d", size = 2000611, upload-time = "2025-04-23T18:32:04.152Z" },
    { url = "https://files.pythonhosted.org/packages/59/a7/63ef2fed1837d1121a894d0ce88439fe3e3b3e48c7543b2a4479eb99c2bd/pydantic_core-2.33.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:04a1a413977ab517154eebb2d326da71638271477d6ad87a769102f7c2488c56", size = 2107924, upload-time = "2025-04-23T18:32:06.129Z" },
    { url = "https://files.pythonhosted.org/packages/04/8f/2551964ef045669801675f1cfc3b0d74147f4901c3ffa42be2ddb1f0efc4/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:c8e7af2f4e0194c22b5b37205bfb293d166a7344a5b0d0eaccebc376546d77d5", size = 2063196, upload-time = "2025-04-23T18:32:08.178Z" },
    { url = "https://files.pythonhosted.org/packages/26/bd/d9602777e77fc6dbb0c7db9ad356e9a985825547dce5ad1d30ee04903918/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:5c92edd15cd58b3c2d34873597a1e20f13094f59cf88068adb18947df5455b4e", size = 2236389, upload-time = "2025-04-23T18:32:10.242Z" },
    { url = "https://files.pythonhosted.org/packages/42/db/0e950daa7e2230423ab342ae918a794964b053bec24ba8af013fc7c94846/pydantic_core-2.33.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:65132b7b4a1c0beded5e057324b7e16e10910c106d43675d9bd87d4f38dde162", size = 2239223, upload-time = "2025-04-23T18:32:12.382Z" },
    { url = "https://files.pythonhosted.org/packages/58/4d/4f937099c545a8a17eb52cb67fe0447fd9a373b348ccfa9a87f141eeb00f/pydantic_core-2.33.2-cp313-cp313-win32.whl", hash = "sha256:52fb90784e0a242bb96ec53f42196a17278855b0f31ac7c3cc6f5c1ec4811849", size = 1900473, upload-time = "2025-04-23T18:32:14.034Z" },
    { url = "https://files.pythonhosted.org/packages/a0/75/4a0a9bac998d78d889def5e4ef2b065acba8cae8c93696906c3a91f310ca/pydantic_core-2.33.2-cp313-cp313-win_amd64.whl", hash = "sha256:c083a3bdd5a93dfe480f1125926afcdbf2917ae714bdb80b36d34318b2bec5d9", size = 1955269, upload-time = "2025-04-23T18:32:15.783Z" },
    { url = "https://files.pythonhosted.org/packages/f9/86/1beda0576969592f1497b4ce8e7bc8cbdf614c352426271b1b10d5f0aa64/pydantic_core-2.33.2-cp313-cp313-win_arm64.whl", hash = "sha256:e80b087132752f6b3d714f041ccf74403799d3b23a72722ea2e6ba2e892555b9", size = 1893921, upload-time = "2025-04-23T18:32:18.473Z" },
    { url = "https://files.pythonhosted.org/packages/a4/7d/e09391c2eebeab681df2b74bfe6c43422fffede8dc74187b2b0bf6fd7571/pydantic_core-2.33.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:61c18fba8e5e9db3ab908620af374db0ac1baa69f0f32df4f61ae23f15e586ac", size = 1806162, upload-time = "2025-04-23T18:32:20.188Z" },
    { url = "https://files.pythonhosted.org/packages/f1/3d/847b6b1fed9f8ed3bb95a9ad04fbd0b212e832d4f0f50ff4d9ee5a9f15cf/pydantic_core-2.33.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:95237e53bb015f67b63c91af7518a62a8660376a6a0db19b89acc77a4d6199f5", size = 1981560, upload-time = "2025-04-23T18:32:22.354Z" },
    { url = "https://files.pythonhosted.org/packages/6f/9a/e73262f6c6656262b5fdd723ad90f518f579b7bc8622e43a942eec53c938/pydantic_core-2.33.2-cp313-cp313t-win_amd64.whl", hash = "sha256:c2fc0a768ef76c15ab9238afa6da7f69895bb5d1ee83aeea2e3509af4472d0b9", size = 1935777, upload-time = "2025-04-23T18:32:25.088Z" },
]

[[package]]
name = "pygments"
version = "2.19.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7c/2d/c3338d48ea6cc0feb8446d8e6937e1408088a72a39937982cc6111d17f84/pygments-2.19.1.tar.gz", hash = "sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f", size = 4968581, upload-time = "2025-01-06T17:26:30.443Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8a/0b/9fcc47d19c48b59121088dd6da2488a49d5f72dacf8262e2790a1d2c7d15/pygments-2.19.1-py3-none-any.whl", hash = "sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c", size = 1225293, upload-time = "2025-01-06T17:26:25.553Z" },
]

[[package]]
name = "python-dotenv"
version = "1.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/88/2c/7bb1416c5620485aa793f2de31d3df393d3686aa8a8506d11e10e13c5baf/python_dotenv-1.1.0.tar.gz", hash = "sha256:41f90bc6f5f177fb41f53e87666db362025010eb28f60a01c9143bfa33a2b2d5", size = 39920, upload-time = "2025-03-25T10:14:56.835Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/1e/18/98a99ad95133c6a6e2005fe89faedf294a748bd5dc803008059409ac9b1e/python_dotenv-1.1.0-py3-none-any.whl", hash = "sha256:d7c01d9e2293916c18baf562d95698754b0dbbb5e74d457c45d4f6561fb9d55d", size = 20256, upload-time = "2025-03-25T10:14:55.034Z" },
]

[[package]]
name = "rich"
version = "14.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "markdown-it-py" },
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a1/53/830aa4c3066a8ab0ae9a9955976fb770fe9c6102117c8ec4ab3ea62d89e8/rich-14.0.0.tar.gz", hash = "sha256:82f1bc23a6a21ebca4ae0c45af9bdbc492ed20231dcb63f297d6d1021a9d5725", size = 224078, upload-time = "2025-03-30T14:15:14.23Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0d/9b/63f4c7ebc259242c89b3acafdb37b41d1185c07ff0011164674e9076b491/rich-14.0.0-py3-none-any.whl", hash = "sha256:1c9491e1951aac09caffd42f448ee3d04e58923ffe14993f6e83068dc395d7e0", size = 243229, upload-time = "2025-03-30T14:15:12.283Z" },
]

[[package]]
name = "sniffio"
version = "1.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc", size = 20372, upload-time = "2024-02-25T23:20:04.057Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e9/44/75a9c9421471a6c4805dbf2356f7c181a29c1879239abab1ea2cc8f38b40/sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2", size = 10235, upload-time = "2024-02-25T23:20:01.196Z" },
]

[[package]]
name = "typing-extensions"
version = "4.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d1/bc/51647cd02527e87d05cb083ccc402f93e441606ff1f01739a62c8ad09ba5/typing_extensions-4.14.0.tar.gz", hash = "sha256:8676b788e32f02ab42d9e7c61324048ae4c6d844a399eebace3d4979d75ceef4", size = 107423, upload-time = "2025-06-02T14:52:11.399Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/69/e0/552843e0d356fbb5256d21449fa957fa4eff3bbc135a74a691ee70c7c5da/typing_extensions-4.14.0-py3-none-any.whl", hash = "sha256:a1514509136dd0b477638fc68d6a91497af5076466ad0fa6c338e44e359944af", size = 43839, upload-time = "2025-06-02T14:52:10.026Z" },
]

[[package]]
name = "typing-inspection"
version = "0.4.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f8/b1/0c11f5058406b3af7609f121aaa6b609744687f1d158b3c3a5bf4cc94238/typing_inspection-0.4.1.tar.gz", hash = "sha256:6ae134cc0203c33377d43188d4064e9b357dba58cff3185f22924610e70a9d28", size = 75726, upload-time = "2025-05-21T18:55:23.885Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/17/69/cd203477f944c353c31bade965f880aa1061fd6bf05ded0726ca845b6ff7/typing_inspection-0.4.1-py3-none-any.whl", hash = "sha256:389055682238f53b04f7badcb49b989835495a96700ced5dab2d8feae4b26f51", size = 14552, upload-time = "2025-05-21T18:55:22.152Z" },
]


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/g1/uv.lock ------


------ FILE START ../../../kz-ytml-1/WX/tezt/groq/uvinit.sh ------

#!/usr/bin/bash
# This bash srcript is for installing the KL docker image here
clear

# Colors
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export WHITE='\033[0;37m'
export NC='\033[0m' # No Color

# Commands

hea1() {
    echo -e "${CYAN}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${CYAN}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${NC}"
}
# UV Setup

uv_gr() {
    hea1 "UV Installation with gradio"

    # Get Name of project
    echo -e "Enter the name of the project: "
    read name_of_project
    if [ -z "$name_of_project" ]; then
        echo -e "${RED}BASTARD ! Project name cannot be empty${NC}"
        exit 1
    fi

    # UC Commands
    CO1="uv init $name_of_project"
    CO2="cd $name_of_project"

    DEPS="rich dotenv groq"
    CO3="uv add  $DEPS"
    CO4="uv tree"

    ## RUN Above Commands
    echo -e "--- Executing ${CO1} ---"
    eval "$CO1"
    echo -e "--- Executing ${CO2} ---"
    eval "$CO2"
    echo -e "--- Executing ${CO3} ---"
    eval "$CO3"
    echo -e "--- Executing ${CO4} ---"
    eval "$CO4"
    echo -e "${GREEN}***** Completed - DrinkHerPiss *****${NC}"
}

# Execution
uv_gr


------ FILE END ../../../kz-ytml-1/WX/tezt/groq/uvinit.sh ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/README.MD ------

1. [NEBY](#neby)
2. [Dirz](#dirz)

# NEBY

> This is for testing nebxyizko stuffs

# Dirz

|     Dir      |      What      |
| :----------: | :------------: |
| [`n1`](./n1) | neby1 Test One |


------ FILE END ../../../kz-ytml-1/WX/tezt/neby/README.MD ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/n1/README.md ------

# n1

1. Testing neby here

# Description of the `src`

|           File           |                                                                                                  Hwah                                                                                                  |
| :----------------------: | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |
|  [nb1.py](./src/nb1.py)  |                                                                  Testting neby here output ot terminal and written to a markdown file                                                                  |
| [nbg1.py](./src/nbg1.py) | Gradio test with the neby , Following [THIS](https://www.gradio.app/guides/chatinterface-examples#samba-nova) was able to get the gradio interface working. Since it uses OpenAI structure, neby works |


------ FILE END ../../../kz-ytml-1/WX/tezt/neby/n1/README.md ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/n1/buty.py ------

# /////////////////////////////////////////////////////////////
# NebyTest 1 - n1
# /////////////////////////////////////////////////////////////

# --- Imports ---

from src.nbg1 import nbg1_main
from src.utz import eline, tline


# --- Main Function ---
def buty():
    nbg1_main()


if __name__ == "__main__":
    tline()
    buty()
    eline()


------ FILE END ../../../kz-ytml-1/WX/tezt/neby/n1/buty.py ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/n1/pyproject.toml ------

[project]
name = "n1"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "dotenv>=0.9.9",
    "gradio>=5.34.0",
    "huggingface-hub>=0.33.0",
    "openai>=1.86.0",
    "rich>=14.0.0",
]


------ FILE END ../../../kz-ytml-1/WX/tezt/neby/n1/pyproject.toml ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/n1/ref/g1.py ------

# ???????????????????????????????????????????????????????????????????
# g1.py - Gradio test 1
# ???????????????????????????????????????????????????????????????????

# --- Imports ---

import time

import gradio as gr

from .mkd import in_txt, in_txt2, txt2
from .utz import header1

# --- GLobal Vars ---

# Choosing the themes
themes = [
    gr.themes.Ocean(),
    gr.themes.Monochrome(),
    gr.themes.Citrus(),
    gr.themes.Glass(),
    gr.themes.Default(),
    gr.themes.Soft()
]
c_th = themes[5]


# --- Main Function ---


def g1_main():
    # g1_1()
    # g1_2()
    g1_3()


# --- Sub Function ---

# General tab testing here
def g1_1():
    header1("Gradio Test 1.1")

    # Introduction section
    def intro_section():
        gr.Markdown(in_txt)

    # Main Interface
    with gr.Blocks(
        theme=c_th
    ) as g1_ui:

        with gr.Tab("Gradio Test 1.1"):
            intro_section()

    g1_ui.launch(
        show_error=True,
    )

# Tsting out the chat interfac tests here


def g1_2():
    header1("Gradio Test - Chat Interface Testing")

    # Intro tab
    def intro_section():
        gr.Markdown(in_txt2)

    # Chat Interface function
    def ch_in():

        def slow_echo(message, history):
            for i in range(len(message)):
                time.sleep(0.05)
                yield "SmellPanty: " + message[:i + 1]

        gr.ChatInterface(
            slow_echo,
            title="Booty Sniffing Chat Interface",
            description="Chat with SmellPanty",
            textbox=gr.Textbox(
                placeholder="Bastard write something useful here !!! 🦧🦧🦧",
            ),
            type="messages",
            flagging_mode="manual",
            flagging_options=["Good", "Bad", "Shit"],
            examples=[
                ["Hi", "Hello"],
                ["How are you?", "Good"],
                ["What's your name?", "My name is SmellPanty"],
            ],
            save_history=True,
        )

    # Main UI
    with gr.Blocks(
        theme=c_th
    ) as g1_ui:

        with gr.Tab("Gradio Test 1.2"):
            intro_section()

        with gr.Tab("Demo Chat Interaface Example"):
            gr.Markdown(txt2)
            ch_in()

    g1_ui.launch(
        show_error=True,
    )

# Testing basic I/O


def g1_3():
    header1("Gradio Test 1.3")

    def welcome(name):
        return f"u typed {name}"

    czz = " .gradio-container {background: url(https://i.giphy.com/U3qYN8S0j3bpK.webp)} "

    # Main ui
    with gr.Blocks(
        theme=c_th,
        css=czz
    ) as g3_ui:

        with gr.Tab("Intro Text"):
            gr.Markdown("#Simple Input output test")

        with gr.Tab("Actual Functions"):
            inp = gr.Textbox(
                placeholder="Fuck OFf bastard",
                type="password"
            )
            out = gr.Textbox()
            rape_btn = gr.Button("Rape")
            rape_btn.click(welcome, inputs=inp, outputs=out)

    g3_ui.launch(
        show_error=True
    )


------ FILE END ../../../kz-ytml-1/WX/tezt/neby/n1/ref/g1.py ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/n1/ref/mkd.py ------

# ??????????????????????????????????????????????
# mkd.py - Markdown block which are imported for the gradio interface in g1.py,
# ???????????????????????????????????????????????

# -------------------------------------------------------------------------------------
# -g1.py - g1_1
# -------------------------------------------------------------------------------------

in_txt = """
# Greadio Test 1 
1. This has various gradio tests being done
2. Trying to spinup a gradio chat interface using various apis , each api its own tab eventually

<img src="https://raw.githubusercontent.com/kachraz/kz-ytml-1/refs/heads/w1/kz/g.webp" width="200">
"""

# -------------------------------------------------------------------------------------
# -g1.py - g1_2 - Chat section text
# -------------------------------------------------------------------------------------

in_txt2 = """
# Gradio Chat interface Test 1
1. Testing the chat interfaces in this section
"""

txt2 = """
# Save history Example
1. This is the exampl wiht saving history
"""


------ FILE END ../../../kz-ytml-1/WX/tezt/neby/n1/ref/mkd.py ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/n1/ref/sam.py ------

# ??????????????????????????????????????????????
# sam.py - Samova Chatbot test following the docs
# ??????????????????????????????????????????????

# --- Imports ---
import os

import gradio as gr
from dotenv import load_dotenv
from openai import OpenAI
from rich import print

from src.utz import header1

# --- Global Vars ---
load_dotenv("src/.ass")
SA_T = os.getenv("SAO")

themes = [
    gr.themes.Ocean(),
    gr.themes.Monochrome(),
    gr.themes.Citrus(),
    gr.themes.Glass(),
    gr.themes.Default(),
    gr.themes.Soft()
]
c_th = themes[5]

# Styling Css
czz = """ 
.gradio-container {background: url(https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExcTJ4b21tZ3hxdmQwYzVuejU1cnZ3dXZkc3hwYnJwdDhmcjlxbWY1MiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/7b8jdNUoFBdcoILjjv/giphy.gif); background-attachment: fixed; background-repeat: no-repeat; background-size: cover; background-position: center;} 
"""

# --- Main Function ---


def sam_main():
    # ass_print()
    # sam_chat1()
    sam_chat2()

# --- Sub Functions ---

# Print Ass


def ass_print():
    header1("Ass Stuff")
    print(SA_T)

# Actual Chat Test from example


def sam_chat1():
    header1("Sam Chat Test 1")

    client = OpenAI(
        base_url="https://api.sambanova.ai/v1",
        api_key=SA_T
    )

    def predict(message, history):
        history.append({"role": "user", "content": message})
        stream = client.chat.completions.create(
            model="Meta-Llama-3.2-1B-Instruct",
            messages=history,
            stream=True
        )
        chunks = []
        for chunk in stream:
            chunks.append(chunk.choices[0].delta.content or "")
            yield "".join(chunks)

    panty = gr.ChatInterface(
        predict,
        title="Samova Chatbot",
        description="Chat with Samova",
        type="messages",
        flagging_mode="manual",
    )

    panty.launch(
        show_error=True
    )


# Same chat as above but now with using blocks

def sam_chat2():
    header1("Samchat 2 - Blocks Layout")

    intro_txt = """
# Samnova Chat with 
1. Tabbed interface 
2. UI Styling 
3. BG Fixes
"""

    def intr_tab():
        gr.Markdown(intro_txt)

    def chat_func():
        client = OpenAI(
            base_url="https://api.sambanova.ai/v1",
            api_key=SA_T
        )

        def predict(message, history):
            history.append({"role": "user", "content": message})
            stream = client.chat.completions.create(
                model="Meta-Llama-3.2-1B-Instruct",
                messages=history,
                stream=True
            )
            chunks = []
            for chunk in stream:
                chunks.append(chunk.choices[0].delta.content or "")
                yield "".join(chunks)

        panty = gr.ChatInterface(
            predict,
            title="Samova Chatbot",
            chatbot=gr.Chatbot(height=700),
            textbox=gr.Textbox(
                placeholder="Bastard write something useful here !!! 🦧🦧🦧"),
            examples=[
                "Describe booty dancing",
                "Write rust script for testing API",
                "What is idiomatic panty"
            ],
            description="Chat with Samova",
            type="messages",
            flagging_mode="manual",
        )

    with gr.Blocks(
        theme=c_th,
        fill_height=True
    ) as pty:

        with gr.Tab("Intro Tab"):
            intr_tab()

        with gr.Tab("Chat"):
            chat_func()

    pty.launch(
        show_error=True
    )


------ FILE END ../../../kz-ytml-1/WX/tezt/neby/n1/ref/sam.py ------


------ FILE START ../../../kz-ytml-1/WX/tezt/neby/n1/rez/HF_LAMA_2025-06-16_08-58-56.md ------

# Generated on 2025-06-16 08:58:56

- ##Model: Qwen/Qwen2.5-Coder-7B
- ##Endpoint: huggingface_hub_inferenceClient
- ##Question: Describe booty dancing

*hiccup* Oh, fair maiden, dost thou desire to know of... *burp*... this most... eh... tantalizing dance, called booty dancing, say... *slurring*...? *stumbles to regain balance*

Verily, 'tis a wondrous spectacle, fit for the court of kings and queens! The dancers, clad in fine silks and velvets, do shake their... *hiccup*... rear ends to the rhythm of the... eh... drums and pipes. *laughs*

Methinks, their hips and legs do move in manner most... *burp*... suggestive, as if beckoning all onlookers to join in the revelry. *slurs*... Aye, 'tis a dance most... ah... brazen, indeed!

Their... *hiccup*... grinning faces, aglow with merriment, do rival the brightest of full moons. And their arms, waving above their heads, do swing with all the force of... *stumbles*... a thousand valorous warriors charging into battle!

Fie upon it, good lady! I知 thee, 'tis a spectacle most... *burp*... gratifying to behold. *stumbles forward, reeling*

Say, hast thou seen such a wonder? * squints* Wilt thou join me in a... *hiccups*... rousing chorus of cheers and applause?

------ FILE END ../../../kz-ytml-1/WX/tezt/neby/n1/rez/HF_LAMA_2025-06-16_08-58-56.md ------


======== END OF PART 23 OF 46  ========

This is only a part of the code. Please do not respond until I provide all parts (23 remaining).